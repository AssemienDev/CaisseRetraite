name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script:
             cd ~
            
            # **LA CORRECTION CLÉ : Supprimer complètement l'ancien dossier**
            echo "Removing old project directory to ensure a clean slate..."
            rm -rf caisse_retrait_deploy
            
            # Cloner à nouveau le dépôt pour garantir d'avoir la dernière version
            echo "Cloning fresh repository..."
            git clone https://github.com/AssemienDev/caisse_retrait_deploy.git
            
            # Se déplacer dans le nouveau dossier
            cd caisse_retrait_deploy
            
            # --- DEBUG : AFFICHER LE CONTENU DES FICHIERS IMPORTANTS ---
            echo "--- Verifying content of Dockerfile on server ---"
            cat Dockerfile
            echo "--- Verifying permissions of entrypoint.sh on server ---"
            ls -l entrypoint.sh
            echo "----------------------------------------------------"
            # -----------------------------------------------------------
            
            # Créer le fichier .env à partir des secrets GitHub
            echo "Creating .env file..."
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
            echo "DEBUG=False" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

            # Stopper les anciens conteneurs s'ils existent (ne produira pas d'erreur si absents)
            docker compose down --remove-orphans

            # Reconstruire l'image sans le cache
            echo "Building new image from scratch..."
            docker compose build --no-cache

            # Démarrer les nouveaux conteneurs
            echo "Starting new containers..."
            docker compose up -d

            # Nettoyer les anciennes images Docker non utilisées
            echo "Cleaning up old images..."
            docker image prune -af
